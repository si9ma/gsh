package gsh

import (
	"bytes"
	"io"
	"os"
	"os/exec"
)

// user-defined project should implements:
type projObj interface {
	initProj()
	MainEntry()
}

// Proj is project class of this ClassFile project.
type Proj struct {
	fout io.Writer
	ferr io.Writer
	fin  io.Reader
	cout string
	err  error
}

func (p *Proj) initProj() {
	p.fin = os.Stdin
	p.fout = os.Stdout
	p.ferr = os.Stderr
}

func (p *Proj) execCmd(name string, args ...string) error {
	cmd := exec.Command(name, args...)
	cmd.Stdin = p.fin
	cmd.Stdout = p.fout
	cmd.Stderr = p.ferr
	p.err = cmd.Run()
	return p.err
}

func (p *Proj) LastErr() error {
	return p.err
}

func (p *Proj) Capout(doSth func()) (string, error) {
	var out bytes.Buffer
	old := p.fout
	p.fout = &out
	defer func() {
		p.fout = old
	}()
	doSth
	p.cout = out.string
	return p.cout, p.err
}

func (p *Proj) Output() string {
	return p.cout
}

func (p *Proj) Rmdir(args ...string) error {
	return p.execCmd("rmdir", args...)
}

func (p *Proj) Mkdir(args ...string) error {
	return p.execCmd("mkdir", args...)
}

func (p *Proj) Ls(args ...string) error {
	return p.execCmd("ls", args...)
}

// Gopt_Proj_Main is main entry of this ClassFile project.
func Gopt_Proj_Main(proj projObj) {
	proj.initProj
	proj.MainEntry // call MainEntry of user code
}
